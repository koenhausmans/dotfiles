""" MISC EDITOR BEHAVIOR {{{

" Enable filetype plugins
filetype plugin indent on

" Set utf8 as standard encoding and en_US as the standard language
set encoding=utf8

" Enable syntax highlighting
syntax enable

" Set to auto read when a file is changed from the outside
set autoread

" Allow buffers to exist in the background
set hidden

" Recognize numbered lists
set formatoptions+=n
" Delete comment character when joining lines
set formatoptions+=j

" Change the timeout timings when matching to mappings / keys
set timeoutlen=300
set ttimeoutlen=10

" Use Matchit.vim
runtime macros/matchit.vim

" Update the path to provide search in subfolders
set path+=**
set path+=/usr/include

" Update the ctags path
set tags+=./.tags
set tags+=.tags

""" END MISC EDITOR BEHAVIOR }}}
""" TEMP FILES BEHAVIOR {{{

if has("persistent_undo")
    set undofile
    set undodir=~/.vim/undodir
endif

""" END TEMP FILES BEHAVIOR }}}
""" STATUSLINE BEHAVIOR {{{

function! ActiveStatusline()
    " Based on: https://gist.github.com/ericbn/f2956cd9ec7d6bff8940c2087247b132
    let statusline="%1*"
    let statusline.="%(%{&filetype!='help'?'\ \ '.bufnr('%'):''}\ │%)"
    let statusline.="\ %<"
    let statusline.="%f\ "
    let statusline.="%*"
    let statusline.="\ %{&modified?'[+]':''}"
    let statusline.="%{&readonly?'[ro]':''}"
    let statusline.="\ %="
    let statusline.="\ %{&filetype!=#''?&filetype:'none'}"
    let statusline.="\ │\ Ln:\ %3l,\ "
    let statusline.="Col:\ %-2v"
    let statusline.="\ │\ %2p%%\ "
    let statusline.="%1*%{fugitive#head()!=''?' '.fugitive#head().'\ ':''}"
    return statusline
endfunction

" Show the statusline at all times
set laststatus=2
set statusline=%!ActiveStatusline()

""" END STATUSLINE BEHAVIOR }}}
""" COLORSCHEME SETTINGS {{{

function! CustomStatuslineColors() abort
    " Gruvbox statusline colors
    if g:colors_name == 'gruvbox'
        highlight StatusLine   cterm=reverse ctermfg=239 ctermbg=223 gui=reverse guifg=#504945 guibg=#ebdbb2
        highlight StatusLineNC cterm=reverse ctermfg=237 ctermbg=246 gui=reverse guifg=#3c3836 guibg=#a89984
        highlight User1        cterm=NONE    ctermfg=235 ctermbg=223 gui=NONE    guifg=#504945 guibg=#ebdbb2
    " Blue statusline colors based on apprentice colors
    elseif g:colors_name == 'apprentice'
        highlight StatusLine   cterm=NONE         ctermfg=252 ctermbg=67  gui=NONE         guifg=#d0d0d0 guibg=#5f87af
        highlight StatusLineNC cterm=NONE         ctermfg=243 ctermbg=237 gui=NONE         guifg=#949494 guibg=#3a3a3a
        highlight User1        cterm=bold,reverse ctermfg=252 ctermbg=67  gui=NONE,reverse guifg=#d0d0d0 guibg=#5f87af
    " Visual Studio Code inspired statusline colors
    else
        highlight StatusLine   cterm=NONE         ctermfg=253 ctermbg=54  gui=NONE         guifg=#dadada guibg=#5f0087
        highlight StatusLineNC cterm=NONE         ctermfg=243 ctermbg=237 gui=NONE         guifg=#949494 guibg=#3a3a3a
        highlight User1        cterm=bold,reverse ctermfg=253 ctermbg=54  gui=bold,reverse guifg=#dadada guibg=#5f0087

        highlight ModeMsg cterm=NONE ctermbg=green ctermfg=black
        highlight Visual cterm=NONE ctermbg=white ctermfg=darkblue
    endif
endfunction

augroup CustomStatusline
    autocmd!
    autocmd ColorScheme * call CustomStatuslineColors()
augroup END

set background=dark

silent! colorscheme elflord
silent! colorscheme gruvbox
silent! colorscheme apprentice

function! SaveColorscheme() abort
    let l:vimhome_plugin_folder = $HOME . "/.vim/plugin"
    let l:last_used_file = l:vimhome_plugin_folder . "/last-used-colorscheme.vim"

    let l:contents = [
        \   'silent! colorscheme ' . g:colors_name
        \ ]

    if !isdirectory(l:vimhome_plugin_folder)
        call mkdir(l:vimhome_plugin_folder, 'p')
    endif

    call writefile(l:contents, l:last_used_file)
endfunction

augroup SaveColorscheme
    autocmd!
    autocmd ColorScheme * call SaveColorscheme()
augroup END

""" END COLORSCHEME SETTINGS }}}
""" INDENT BEHAVIOR {{{

" Use spaces instead of tabs
set expandtab

" Be smart when using tabs
set smarttab

" Round indent to multiple of 'shiftwidth'.
set shiftround

" Set up indents to use 4 spaces
set shiftwidth=4
set softtabstop=4

" Make tab characters display as 8 characters wide
set tabstop=8

" Automatically indent when opening a new line
set autoindent

""" END INDENT BEHAVIOR }}}
""" SEARCH BEHAVIOR {{{

" Show search results as we type
set incsearch

" Highlight search results
set hlsearch

" Ignore case when searching
set ignorecase

" Don't ignore case if we have a capital letter
set smartcase

""" END SEARCH BEHAVIOR }}}
""" INSERT MODE BEHAVIOR {{{

" Configure backspace so it acts as it should act
set backspace=indent,eol,start

""" END INSERT MODE BEHAVIOR }}}
""" NORMAL MODE BEHAVIOR {{{

" Treat long lines as break lines (useful when moving around in them)
noremap <silent> <expr> j (v:count == 0 ? 'gj' : 'j')
noremap <silent> <expr> k (v:count == 0 ? 'gk' : 'k')
noremap <silent> $ g$
" Remap VIM 0 to first non-blank character
noremap <silent> 0 g^

" Navigate the vim splits with shortcuts
if empty(glob("~/.vim/plugged/vim-tmux-navigator/"))
    nnoremap <c-j> <c-w>j
    nnoremap <c-k> <c-w>k
    nnoremap <c-h> <c-w>h
    nnoremap <c-l> <c-w>l
endif

""" END NORMAL MODE BEHAVIOR }}}
""" VISUAL MODE BEHAVIOR {{{

" Reselect visual block after indent/outdent: http://vimbits.com/bits/20
vnoremap < <gv
vnoremap > >gv
vnoremap = =gv

" Set 3 lines to the cursor - when moving vertically using j/k 
set scrolloff=3

" Highlight the current line
set cursorline

augroup HighlightFollowsFocus
    autocmd!
    autocmd WinEnter,FocusGained * set cursorline
    autocmd WinLeave,FocusLost * set nocursorline
augroup END

" Show (relative) line numbers
set number
if exists("&relativenumber")
    set relativenumber
endif

augroup SmartNumbers
    autocmd!
    if exists("&relativenumber")
        autocmd WinEnter,FocusGained * if &number | setlocal relativenumber | endif
        autocmd WinLeave,FocusLost * if &number | setlocal norelativenumber | endif
    endif
augroup END

set showbreak=↪\ 
set list
set listchars=tab:»\ ,trail:•,nbsp:␣,precedes:⟨,extends:⟩

""" END VISUAL BEHAVIOR }}}
""" FOLD BEHAVIOR {{{

" Fold by markers
set foldmethod=marker

" Open folds on jumps
set foldopen+=jump

""" END FOLD BEHAVIOR }}}
""" WINDOW BEHAVIOR {{{

" Open new splits below
set splitbelow

" Open new vertical splits to the right
set splitright

""" END WINDOW BEHAVIOR }}}
""" COMMAND LINE BEHAVIOR {{{

set wildmenu

" Complete till longest string and list all matches
set wildmode=longest:list,full

if exists("&wildignorecase")
    set wildignorecase
endif

if &history < 1000
    set history=1000
endif

" Command line mapping to write with root permissions
cmap w!! w !sudo tee > /dev/null %

" Command line expansion for the current working directory
cabbr <expr> %% expand('%:p:h')

""" END COMMAND LINE BEHAVIOR }}}
""" LEADER KEY BEHAVIOR {{{

" Delete trailing white space on save, useful for Python and CoffeeScript ;)
function! StripTrailingWhitespaces()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc

" Leader key mappnigs
nnoremap          ,b       :b <C-d>
nnoremap <silent> ,c       :bd<cr>
nnoremap          ,e       :e **/*
nnoremap          ,f       :find *
nnoremap <silent> ,m       :make<cr>
nnoremap <silent> ,q       :quit<cr>
nnoremap          ,s       :sfind *
nnoremap          ,t       :tjump /
nmap     <silent> ,T       :call StripTrailingWhitespaces()<CR>:retab<CR>
nnoremap          ,v       :vert sfind *
nnoremap <silent> ,z       :b#<cr>
nnoremap          ,/       :grep<space>
nnoremap <silent> ,<space> :nohlsearch<cr>

""" END LEADER KEY BEHAVIOR }}}
""" GREP AND VIMGREP BEHAVIOR {{{

" Check for file_in_path error, due to incompatibility with Vim <7.3
if executable('ag')
    set grepprg=ag\ --vimgrep\ $*
    set grepformat=%f:%l:%c:%m
elseif executable('ack')
    set grepprg=ack\ --nogroup\ --column\ --smart-case\ --nocolor\ --follow\ $*
    set grepformat=%f:%l:%c:%m
endif

command! -nargs=+ -complete=file_in_path -bar Grep silent! grep! <args> | redraw!

nnoremap <silent> K :grep! <cword> -r *<cr>
vnoremap <silent> K y:grep! <c-r>" -r *<cr>

""" END GREP AND VIMGREP BEHAVIOR }}}
""" BUFFER SPECIFIC BEHAVIOR {{{

" Automatically enable spell
augroup FileTypeSpell
    autocmd!
    if has("spell")
        autocmd Filetype markdown,gitcommit,todo setlocal spell
    endif
augroup END

augroup AdditionalFileTypesCommands
    autocmd!
    autocmd BufRead,BufNewFile *.md,*.markdown set filetype=markdown
    autocmd BufRead,BufNewFile Jenkinsfile* set filetype=groovy

    autocmd BufWrite *.py :call StripTrailingWhitespaces()
    autocmd BufWrite *.coffee :call StripTrailingWhitespaces()

    autocmd Filetype c,cpp,cs,java  setlocal commentstring=//\ %s

    autocmd FileType qf setlocal nowrap
augroup END


" Return to last edit position when opening files
augroup LastBufferPosition
    autocmd!
    autocmd BufReadPost *
        \ if line("'\"") > 0 && line("'\"") <= line("$") |
        \   exe "normal! g`\"" |
        \ endif
augroup END

" Automatically open cwindow or lwindow on :grep / :make / :lvimgrep / etc.
augroup AutomaticQuickFix
    autocmd!
    autocmd QuickFixCmdPost [^l]* cwindow
    autocmd QuickFixCmdPost    l* lwindow
augroup END

""" END BUFFER SPECIFIC BEHAVIOR }}}
""" CODE COMPLETION BEHAVIOR {{{

" Enable omni completion by using <C-X><C-O> in insert mode
set omnifunc=syntaxcomplete#Complete

""" END CODE COMPLETION BEHAVIOR }}}
""" C++ SPECIFIC BEHAVIOR {{{

" Fix C indentation and make sure access specifiers are without indentation
set cindent

" Do not indent C++ scope declarations (public/private/protected) within classes
set cinoptions+=g0
" Do not indent after a namespace block
set cinoptions+=N-s

""" END C++ SPECIFIC BEHAVIOR }}}

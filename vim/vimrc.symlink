""" PLUGIN MANAGER (VIM-PLUG) {{{

" Auto-install vim-plug
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall
endif

call plug#begin('~/.vim/plugged')

" Colorschemes: Additional colorschemes that can be used
Plug 'morhetz/gruvbox'
Plug 'romainl/flattened'
Plug 'romainl/apprentice'
Plug 'KeitaNakamura/neodark.vim'
Plug 'sjl/badwolf'
Plug 'joshdick/onedark.vim'

" Syntax: Additional syntaxes that can be used
Plug 'tpope/vim-git', { 'for': 'git' }
Plug 'cakebaker/scss-syntax.vim', { 'for': 'scss' }
Plug 'rust-lang/rust.vim'

" FZF Vim: Fuzzy file openener vim extension
if executable('fzf')
    Plug 'junegunn/fzf', {'dir': '~/.fzf', 'frozen': 1}
    Plug 'junegunn/fzf.vim'
endif

" Tmux-Navigator: Allows tmux keyboard shortcuts to be used within vim
Plug 'christoomey/vim-tmux-navigator'

" Git: Plugins for git usage
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'

" Bbye: Buffer Bye for Vim - Allows closing buffers without screwing up the window layout
Plug 'moll/vim-bbye', {'on': 'Bdelete'}

" surround.vim: quoting/parenthesizing made simple
Plug 'tpope/vim-surround'

" repeat.vim: Enable repeating supported plugin maps with "."
Plug 'tpope/vim-repeat'

" unimpaired.vim: Pair mapping for vim lists
Plug 'tpope/vim-unimpaired'

" vim-cool: Disable hlsearch when you are done searching
Plug 'romainl/vim-cool'

" ReplaceWithRegister: Replace text with the contents of a register
Plug 'vim-scripts/ReplaceWithRegister'

" vim-argwrap: Wrap and unwrap function arguments, lists and dictionaries
Plug 'FooSoft/vim-argwrap'

" vim-commentary: Commenting plugins
Plug 'tpope/vim-commentary'

" Auto Pairs: Provides automatic matching brackets / quotes
Plug 'jiangmiao/auto-pairs'

call plug#end()

""" END PLUGIN MANAGER }}}
""" LOAD MINIMAL VIMRC {{{

if !empty($DOTFILES)
    let s:vimrc_root = $DOTFILES
else
    let s:vimrc_root = expand(expand('<sfile>:p:h') . "/.dotfiles")
endif
exec "source " . expand(s:vimrc_root . "/vim/vimrc.minimal")

""" END LOAD MINIMAL VIMRC }}}
""" PLUGIN INTEGRATION {{{

" FZF Integration: Add shortcuts for FZF usage
let $FZF_DEFAULT_COMMAND = 'ag -g ""'

function! s:find_git_root()
    return system('git rev-parse --show-toplevel 2> /dev/null')[:-2]
endfunction

if executable('fzf')
    command! GitRootFiles execute 'Files' s:find_git_root()
    command! LocalFiles execute 'Files' expand('%:h')

    nnoremap <silent> ,b :Buffers<cr>
    nnoremap <silent> ,G :GitFiles<cr>
    nnoremap <silent> ,f :Files<cr>
    nnoremap <silent> ,F :LocalFiles<cr>
    nnoremap <silent> ,t :Tags<cr>
endif

if executable('ag')
    nnoremap <silent> ,/ :execute 'Ag ' . input('Ag/')<cr>
endif

" vim-argwrap
nnoremap <silent> ,A :ArgWrap<cr>

" Bbye integration: Close the current buffer
cabbrev bd Bdelete
nnoremap ,c :Bdelete<cr>

" Vim-surround integration: Allow the usage of * as a surround character for multiline C-style comments
let g:surround_{char2nr("*")} = "/* \r */"

" Git-Gutter integration
let g:gitgutter_map_keys = 0

""" END PLUGIN INTEGRATION }}}
